package simpledb;

import java.util.*;


/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    JoinPredicate predicate;
    DbIterator child1;
    DbIterator child2;
    TupleDesc tupleDesc;
    Tuple t1;
    int t1NumFields;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        this.t1 = null;
    }

    public JoinPredicate getJoinPredicate() {
        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    	TupleDesc tuple1Desc = child1.getTupleDesc();
    	int fieldIndex = predicate.getField1();
        return tuple1Desc.getFieldName(fieldIndex);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	TupleDesc tuple2Desc = child2.getTupleDesc();
    	int fieldIndex = predicate.getField2();
        return tuple2Desc.getFieldName(fieldIndex);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
    }

    public void close() {
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	child1.rewind();
    	child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (t1 == null) {
    		if (child1.hasNext()) {
    			t1 = child1.next();
    			t1NumFields = t1.getTupleDesc().numFields();
    		} else {
    			System.out.println("fdsjkfjsdlk");
    			return null;
    		}
    	}
    	while (child2.hasNext() || child1.hasNext()) {
    		if (child2.hasNext()) { 
    			Tuple t2 = child2.next();
	    		if (predicate.filter(t1, t2)) {
	    			Tuple result = new Tuple(tupleDesc);
	    			int t2NumFields = child2.getTupleDesc().numFields();
	    			for (int i = 0; i < t1NumFields; i++) {
	    				Field f = t1.getField(i);
	    				result.setField(i, f);
	    			}
	    			for (int i = t1NumFields; i < t1NumFields + t2NumFields; i++) {
	    				int fIndex = i - t1NumFields;
	    				Field f = t2.getField(fIndex);
	    				result.setField(i, f);
	    			}
	    			return result;
	    		}
    		} else {
    			t1 = child1.next();
    			t1NumFields = t1.getTupleDesc().numFields();
    			child2.rewind();
    		}
        }
        return null;    	
    }

    @Override
    public DbIterator[] getChildren() {
        DbIterator[] children = {child1, child2};
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        child1 = children[0];
        child2 = children[1];
    }
}
